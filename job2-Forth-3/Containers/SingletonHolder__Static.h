////////////////////////////////////////////////////////////////////////////////
// class SingletonHolder
////////////////////////////////////////////////////////////////////////////////

template <class ObjectType>
class SingletonHolder
{
public:
    // Returns a reference to singleton object
    static ObjectType & Instance();

    // Deleted methods
    SingletonHolder & operator=(const SingletonHolder &)=delete;
    SingletonHolder(const SingletonHolder &)=delete;
private:
    // Helpers
    static void DestroySingleton();

    // Protection
    SingletonHolder()=default;
    ~SingletonHolder()=default;

    // Data
    static bool        destroyed_;
};

////////////////////////////////////////////////////////////////////////////////
// SingletonHolder's data
////////////////////////////////////////////////////////////////////////////////

template<class T>
bool SingletonHolder<T>::destroyed_ = false;

////////////////////////////////////////////////////////////////////////////////
// SingletonHolder::Instance
////////////////////////////////////////////////////////////////////////////////

template<class T>
inline T & SingletonHolder<T>::Instance()
{
    static T instance_;
    return instance_;
}

////////////////////////////////////////////////////////////////////////////////
// SingletonHolder::MakeInstance
////////////////////////////////////////////////////////////////////////////////

template<class T>
void SingletonHolder<T>::DestroySingleton()
{
    destroyed_ = true;
}
